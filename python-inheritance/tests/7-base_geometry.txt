>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("width", 89)

>>> bg.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented

>>> bg.integer_validator("width", -89)
Traceback (most recent call last):
  ...
ValueError: width must be greater than 0
>>> bg.integer_validator("width", )
Traceback (most recent call last):
  ...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("width", 0)
Traceback (most recent call last):
  ...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", "hello")
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", 1, 3)
Traceback (most recent call last):
  ...
TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

>>> bg.integer_validator("width", [1, 2])
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", 89.5)
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", 1e35)
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", float('nan'))
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", {1, 2})
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", {"key": 1})
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", 1e35)
Traceback (most recent call last):
  ...
TypeError: width must be an integer

>>> bg.integer_validator("width", -1e35)
Traceback (most recent call last):
  ...
TypeError: width must be an integer
